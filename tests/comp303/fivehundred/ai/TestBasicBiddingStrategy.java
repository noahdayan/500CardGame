package comp303.fivehundred.ai;

import static org.junit.Assert.*;

import org.junit.Test;

import comp303.fivehundred.model.Bid;
import comp303.fivehundred.model.Hand;
import comp303.fivehundred.util.AllCards;

/**
 * 
 * @author Noah Dayan
 *
 */
public class TestBasicBiddingStrategy
{
	@Test
	public void testBid()
	{
		BasicBiddingStrategy testBBS = new BasicBiddingStrategy();
		Bid[] previousBids = new Bid[0];
		Hand aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aQS);
		aHand.add(AllCards.aJS);
		aHand.add(AllCards.aTS);
		aHand.add(AllCards.a9S);
		aHand.add(AllCards.a8S);
		aHand.add(AllCards.a7S);
		aHand.add(AllCards.a6S);
		aHand.add(AllCards.a5S);
		assertFalse(testBBS.selectBid(previousBids, aHand).isNoTrump());
		previousBids = new Bid[1];
		previousBids[0] = new Bid(0);
		assertFalse(testBBS.selectBid(previousBids, aHand).isPass());
		previousBids[0] = new Bid(24);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
		previousBids = new Bid[3];
		previousBids[0] = new Bid();
		previousBids[1] = new Bid();
		previousBids[2] = new Bid();
		aHand = new Hand();
		aHand.add(AllCards.a4C);
		aHand.add(AllCards.a4D);
		aHand.add(AllCards.a4H);
		aHand.add(AllCards.a4S);
		aHand.add(AllCards.a5C);
		aHand.add(AllCards.a5D);
		aHand.add(AllCards.a5H);
		aHand.add(AllCards.a5S);
		aHand.add(AllCards.a6S);
		aHand.add(AllCards.a6C);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
		aHand = new Hand();
		aHand.add(AllCards.aAC);
		aHand.add(AllCards.aAD);
		aHand.add(AllCards.aAH);
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKC);
		aHand.add(AllCards.aKD);
		aHand.add(AllCards.aKH);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aHJo);
		aHand.add(AllCards.aLJo);
		assertTrue(testBBS.selectBid(previousBids, aHand).isNoTrump());
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),14);
		aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aQS);
		aHand.add(AllCards.aJS);
		aHand.add(AllCards.aTS);
		aHand.add(AllCards.a9S);
		aHand.add(AllCards.a8S);
		aHand.add(AllCards.a7D);
		aHand.add(AllCards.a6H);
		aHand.add(AllCards.a5C);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),15);
		aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKC);
		aHand.add(AllCards.aAH);
		aHand.add(AllCards.aJH);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aHJo);
		aHand.add(AllCards.aAD);
		aHand.add(AllCards.aKH);
		aHand.add(AllCards.aJS);
		aHand.add(AllCards.aKD);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),9);
		aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aQS);
		aHand.add(AllCards.aJS);
		aHand.add(AllCards.aTS);
		aHand.add(AllCards.a9S);
		aHand.add(AllCards.a8S);
		aHand.add(AllCards.a7S);
		aHand.add(AllCards.a6S);
		aHand.add(AllCards.a5S);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),20);
		aHand = new Hand();
		aHand.add(AllCards.aAC);
		aHand.add(AllCards.aKC);
		aHand.add(AllCards.aQC);
		aHand.add(AllCards.aJC);
		aHand.add(AllCards.aTC);
		aHand.add(AllCards.a9C);
		aHand.add(AllCards.a8C);
		aHand.add(AllCards.a7C);
		aHand.add(AllCards.a6C);
		aHand.add(AllCards.a5C);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),21);
		aHand = new Hand();
		aHand.add(AllCards.aAD);
		aHand.add(AllCards.aKD);
		aHand.add(AllCards.aQD);
		aHand.add(AllCards.aJD);
		aHand.add(AllCards.aTD);
		aHand.add(AllCards.a9D);
		aHand.add(AllCards.a8D);
		aHand.add(AllCards.a7D);
		aHand.add(AllCards.a6D);
		aHand.add(AllCards.a5D);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),22);
		aHand = new Hand();
		aHand.add(AllCards.aAH);
		aHand.add(AllCards.aKH);
		aHand.add(AllCards.aQH);
		aHand.add(AllCards.aJH);
		aHand.add(AllCards.aTH);
		aHand.add(AllCards.a9H);
		aHand.add(AllCards.a8H);
		aHand.add(AllCards.a7H);
		aHand.add(AllCards.a6H);
		aHand.add(AllCards.a5H);
		assertEquals(testBBS.selectBid(previousBids, aHand).toIndex(),23);
		previousBids[0] = new Bid(4);
		previousBids[1] = new Bid(9);
		previousBids[2] = new Bid();
		aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKS);
		aHand.add(AllCards.aQS);
		aHand.add(AllCards.aJS);
		aHand.add(AllCards.aTS);
		aHand.add(AllCards.a9S);
		aHand.add(AllCards.a8S);
		aHand.add(AllCards.a7S);
		aHand.add(AllCards.a6S);
		aHand.add(AllCards.a5S);
		assertFalse(testBBS.selectBid(previousBids, aHand).isNoTrump());
		previousBids[0] = new Bid(0);
		previousBids[1] = new Bid(1);
		previousBids[2] = new Bid(2);
		aHand = new Hand();
		aHand.add(AllCards.aAS);
		aHand.add(AllCards.aKC);
		aHand.add(AllCards.aQD);
		aHand.add(AllCards.aJH);
		aHand.add(AllCards.aTS);
		aHand.add(AllCards.a9C);
		aHand.add(AllCards.a8D);
		aHand.add(AllCards.a7H);
		aHand.add(AllCards.a6S);
		aHand.add(AllCards.a5D);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
		previousBids[0] = new Bid(1);
		previousBids[1] = new Bid(2);
		previousBids[2] = new Bid(3);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
		previousBids[0] = new Bid(2);
		previousBids[1] = new Bid(3);
		previousBids[2] = new Bid(5);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
		previousBids[0] = new Bid(3);
		previousBids[1] = new Bid(5);
		previousBids[2] = new Bid(6);
		assertTrue(testBBS.selectBid(previousBids, aHand).isPass());
	}
}
